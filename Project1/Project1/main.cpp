

// 주석
// 설명, 역할, 코드로 인식되지 않는다.

int main()
{
	// 자료형 (크기 단위, byte) Data Type
	// 정수형 : char(1), short(2), int(4), long(4), long long(8)
	// 실수형 : float(4), double(8)
	int i = 0;

	// 1바이트로 양수만 표현
	// 256 가지 -> 0 ~ 255
	unsigned char c = 0;
	c = 0;
	// c = 255;
	c = -1;

	// 1바이트로 양수, 음수 둘다 표현
	// -128 ~ 0 ~ 127
	char c1 = 0;
	c1 = -1;

	// 음의 정수 찾기(2의 보수법)
	// 대응되는 양수의 부호를 반전 후, 1을 더한다.

	int a = 4 + (int)4.0;

	// 정수표현 방식과 실수 표현 방식은 다르다
	// 실수 표현방식은 정밀도에 의존한다.
	// 따라서 double(8) 자료형이 float(4) 보다 더 아래의 소수점까지
	// 정확하게 표현이 가능하다.

	// 정수는 정수끼리, 실수는 실수끼리 연산하되,
	// 두 표현방식의 피 연산자가 연산될 경우 명시적으로 변환하자.
	float f = 10.2415f + (float)20;

	// 실수를 상수로 적을 경우 소수점 뒤에 f를 붙이면 float 자료형으로,
	// f를 붙이지 않으면 double 자료형으로 간주한다.
	// 0.1f; 0.1;


	// 연산자
	// 대입 연산자, =

	// 산술 연산자
	// +, -, *, /, %(모듈러스, 나머지, 피연산자가 모두 정수)
	// ++, -- (증감 연산자)
	// 한 단계 증가 또는 감소
	int data = 10 + 10;
	// data = data + 20;
	data += 20;

	data = (int)(10.f / 3.f);


	data = 0;
	++data;	// 전위(전치)
	data++;	// 후위(후치)
	// 후위 연산자로 사용하는 경우, 연산자 우선순위가 가장 나중으로 밀린다.


	data = 0;

	a = 10;
	data = a++;	// 10
	data = ++a;	// 11

	data = 0;
	data--;
	data--;



	
	return 0;
}